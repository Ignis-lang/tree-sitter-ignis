================================================================================
VALID - function
================================================================================

function main(): void {
  let a: number = 10;

  println(a);
}

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (type_expression
      (type_identifier
        (primitive_keyword)))
    (block
      (variable_declaration
        (identifier)
        (type_expression
          (type_identifier
            (identifier)))
        (expression
          (primary_expression
            (literal
              (integer_literal
                (decimal_literal))))))
      (expression_statement
        (expression
          (call_expression
            (primary_expression
              (identifier))
            (expression
              (primary_expression
                (identifier)))))))))

================================================================================
VALID - function generic params
================================================================================

function sum<T>(a: T, b: T): T {
  return a + b;
}

sum<int>(1, 2)

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (generic_type_declaration
      (type_expression
        (type_identifier
          (identifier))))
    (parameter_declaration
      (identifier)
      (type_expression
        (type_identifier
          (identifier))))
    (parameter_declaration
      (identifier)
      (type_expression
        (type_identifier
          (identifier))))
    (type_expression
      (type_identifier
        (identifier)))
    (block
      (return_statement
        (expression
          (binary_expression
            (expression
              (primary_expression
                (identifier)))
            (expression
              (primary_expression
                (identifier))))))))
  (expression
    (call_expression
      (primary_expression
        (identifier))
      (generic_type_declaration
        (type_expression
          (type_identifier
            (identifier))))
      (expression
        (primary_expression
          (literal
            (integer_literal
              (decimal_literal)))))
      (expression
        (primary_expression
          (literal
            (integer_literal
              (decimal_literal))))))))

================================================================================
VALID - Mut params
================================================================================

function fibonacci(num: mut i64): i64 {
  if (num < 2) {
    return num;
  }

  return fibonacci(num - 1) + fibonacci(num - 2);
}

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (parameter_declaration
      (identifier)
      (variable_modifiers
        (mutable_specifier))
      (type_expression
        (type_identifier
          (primitive_keyword))))
    (type_expression
      (type_identifier
        (primitive_keyword)))
    (block
      (if_statement
        (expression
          (binary_expression
            (expression
              (primary_expression
                (identifier)))
            (literal
              (integer_literal
                (decimal_literal)))))
        (block
          (return_statement
            (expression
              (primary_expression
                (identifier))))))
      (return_statement
        (expression
          (binary_expression
            (expression
              (call_expression
                (primary_expression
                  (identifier))
                (expression
                  (binary_expression
                    (expression
                      (primary_expression
                        (identifier)))
                    (literal
                      (integer_literal
                        (decimal_literal)))))))
            (expression
              (call_expression
                (primary_expression
                  (identifier))
                (expression
                  (binary_expression
                    (expression
                      (primary_expression
                        (identifier)))
                    (literal
                      (integer_literal
                        (decimal_literal)))))))))))))
